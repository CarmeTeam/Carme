# ----------------------------------------------------------------------------------------------------------------------------------
# Carme
# ----------------------------------------------------------------------------------------------------------------------------------
# settings.py - central frontend settings
#
# see Carme development guide for documentation:
# * Carme/Carme-Doc/DevelDoc/readme.md
#
# Copyright 2019 by Fraunhofer ITWM
# License: http://open-carme.org/LICENSE.md
# Contact: info@open-carme.org
# ----------------------------------------------------------------------------------------------------------------------------------


import os
import logging
import ldap
from django_auth_ldap.config import LDAPSearch, PosixGroupType, LDAPGroupQuery, GroupOfNamesType
from django.urls import reverse_lazy


# Carme config ---------------------------------------------------------------------------------------------------------------------
from importlib.machinery import SourceFileLoader
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SourceFileLoader('CarmeConfigFrontend', '/etc/carme/CarmeConfig.frontend').load_module()
from CarmeConfigFrontend import *

CSRF_TRUSTED_ORIGINS=['https://'+CARME_URL,'https://*.127.0.0.1']

# quick-start settings -------------------------------------------------------------------------------------------------------------
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CARME_FRONTEND_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CARME_FRONTEND_DEBUG

ALLOWED_HOSTS = [CARME_URL, CARME_LOGINNODE_IP]
#-----------------------------------------------------------------------------------------------------------------------------------


# define installed applications ----------------------------------------------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'carme.apps.DbModelConfig',
    'maintenance_mode',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites.apps.SitesConfig',
    'django.contrib.humanize.apps.HumanizeConfig',
    'django_nyt.apps.DjangoNytConfig',
    'django_db_logger',
    'mptt',
    'todo',
    'sekizai',
    'sorl.thumbnail',
    'wiki.apps.WikiConfig',
    'wiki.plugins.attachments.apps.AttachmentsConfig',
    'wiki.plugins.notifications.apps.NotificationsConfig',
    'wiki.plugins.images.apps.ImagesConfig',
    'wiki.plugins.macros.apps.MacrosConfig',
				'django_otp', 
    'django_otp.plugins.otp_static', 
    'django_otp.plugins.otp_totp',   
    'two_factor',		
				#'otp_yubikey',
				'mathfilters', 
]
#-----------------------------------------------------------------------------------------------------------------------------------


# define middleware ----------------------------------------------------------------------------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
				'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'maintenance_mode.middleware.MaintenanceModeMiddleware',
]
#-----------------------------------------------------------------------------------------------------------------------------------


# root url -------------------------------------------------------------------------------------------------------------------------
ROOT_URLCONF = 'scripts.urls'
#-----------------------------------------------------------------------------------------------------------------------------------


# define templates -----------------------------------------------------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'maintenance_mode.context_processors.maintenance_mode',
                'sekizai.context_processors.sekizai',
                'django_settings_export.settings_export',
            ],
        },
    },
]
#-----------------------------------------------------------------------------------------------------------------------------------


# CarmeConfig exports --------------------------------------------------------------------------------------------------------------
SETTINGS_EXPORT = [
            'CARME_FRONTEND_LINK_PROXY',
            'CARME_FRONTEND_LINK_MONITOR',
            'CARME_FRONTEND_LINK_SWITCH',
            'CARME_FRONTEND_LINK_LDAP',
            'CARME_FRONTEND_LINK_DISCLAIMER',
            'CARME_FRONTEND_LINK_PRIVACY',
            'CARME_FRONTEND_DEBUG',
            ]
#-----------------------------------------------------------------------------------------------------------------------------------


# define wesgi app -----------------------------------------------------------------------------------------------------------------
WSGI_APPLICATION = 'scripts.wsgi.application'
#-----------------------------------------------------------------------------------------------------------------------------------


# Database -------------------------------------------------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': CARME_DB_DB,
        'USER': CARME_DB_USER,
        'PASSWORD': CARME_DB_PW,
        'HOST': CARME_DB_NODE,
        'PORT': CARME_DB_PORT,
    },

    'slurm': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'slurm_acct_db',
        'USER': CARME_DB_USER,
        'PASSWORD': CARME_DB_PW,
        'HOST': CARME_DB_NODE,
        'PORT': CARME_SLURM_DB_PORT,
    },

}

DATABASE_ROUTERS = ('carme.dbrouters.MyDBRouter',)

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
#-----------------------------------------------------------------------------------------------------------------------------------


# password validation --------------------------------------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
#-----------------------------------------------------------------------------------------------------------------------------------


# logging --------------------------------------------------------------------------------------------------------------------------
# https://docs.python.org/3/library/logging.html

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}]: {levelname}: {module} {process:d} {thread:d} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '[{asctime}]: {levelname}: {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/opt/Carme-Apache-Logs/django.log',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}
#-----------------------------------------------------------------------------------------------------------------------------------


# Login ----------------------------------------------------------------------------------------------------------------------------
LOGIN_URL = 'two_factor:login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = 'account/login/'
#----------------------------------------------------------------------------------------------------------------------------------


# LDAP -----------------------------------------------------------------------------------------------------------------------------
# NOTE: This section has to be modified according to your specific LDAP setup!
#       In particualar the variables
#         - AUTH_LDAP_GROUP_BASE
#         - AUTH_LDAP_USER_BASE
#         - AUTH_LDAP_GROUP_FILTER
#         - AUTH_LDAP_USER_SEARCH or AUTH_LDAP_USER_DN_TEMPLATE
#         - AUTH_LDAP_GROUP_TYPE
#         - AUTH_LDAP_REQUIRE_GROUP (if you want to limit access)
#         - AUTH_LDAP_USER_FLAGS_BY_GROUP
#         - AUTH_LDAP_USER_ATTR_MAP
#       have to be checked and (maybe) adjusted.
#       This has to be done as django is at this point in thime not able to be so generic to work with every possible LDAP setup.


# set ldap server uri
AUTH_LDAP_SERVER_URI = CARME_LDAP_SERVER_PROTO + CARME_LDAP_SERVER_IP


# set ldap bind dn
AUTH_LDAP_BIND_DN = CARME_LDAP_BIND_DN


# set ldap password
AUTH_LDAP_BIND_PASSWORD = CARME_LDAP_SERVER_PW


# define ldap base dn
LDAP_BASE_DN = CARME_LDAP_BASE_DN


# set ldap base dn to search for groups
# NOTE: This is an example!
AUTH_LDAP_GROUP_BASE = LDAP_BASE_DN
#AUTH_LDAP_GROUP_BASE = "cn=groups," + LDAP_BASE_DN                                       # example how to modify this variable


# set ldap base dn to search for users
# NOTE: This is an example!
AUTH_LDAP_USER_BASE = LDAP_BASE_DN
#AUTH_LDAP_USER_BASE = 'cn=users,' + LDAP_BASE_DN                                         # example how to modify this variable


# define ldap group filter
# NOTE: This is an example!
AUTH_LDAP_GROUP_FILTER = "(objectClass=PosixGroup)"
#AUTH_LDAP_GROUP_FILTER = "(&(objectClass=groupOfNames)(|(cn=admins)(cn=users)))"         # example of anohter search filter


# format authenticating users distinguished name
# using ldap user search
AUTH_LDAP_USER_SEARCH = LDAPSearch(AUTH_LDAP_USER_BASE,
                                   ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
# using user dn template
#AUTH_LDAP_USER_DN_TEMPLATE = 'uid=%(user)s,' + AUTH_LDAP_USER_BASE


# format authenticating groups distinguished name using ldap user search
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(AUTH_LDAP_GROUP_BASE,
                                    ldap.SCOPE_SUBTREE, AUTH_LDAP_GROUP_FILTER
                                    )


# define ldap group type
# NOTE: This is an example!
AUTH_LDAP_GROUP_TYPE = PosixGroupType()
#AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")                                  # example of another group type


# restricts groups that are allowed to user CARME
# NOTE: If you don't want to restrict the access to specific LDAP groups simply comment the AUTH_LDAP_REQUIRE_GROUP variable
# NOTE: This is an example!
AUTH_LDAP_REQUIRE_GROUP = (LDAPGroupQuery('cn=admins,' + AUTH_LDAP_GROUP_BASE)
                           | LDAPGroupQuery('cn=users,' + AUTH_LDAP_GROUP_BASE)
                          )


# set user flags by ldap groups
# NOTE: If you cannot modify AUTH_LDAP_GROUP_BASE in such a way that it maps all your possible groups modify it directly
# NOTE: there is no limitation regarding the goups you can add here
# NOTE: This is an example!
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    'is_active': (
        LDAPGroupQuery('cn=admins,' + AUTH_LDAP_GROUP_BASE)
        | LDAPGroupQuery('cn=users,' + AUTH_LDAP_GROUP_BASE)
    ),
    'is_staff': 'cn=admins,' + AUTH_LDAP_GROUP_BASE,
    'is_superuser': 'cn=admins,' + AUTH_LDAP_GROUP_BASE,
}


# mirror a user’s ldap group membership
AUTH_LDAP_MIRROR_GROUPS = True


# populate the django user from the LDAP directory
# NOTE: This is an example!
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "cn",
    "last_name": "cn",
    "email": "homeDirectory",
    #"full_name": "displayName",
}


# set authentication backends
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
]


# enable debug for ldap server connection
logger = logging.getLogger('django_auth_ldap')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)
# ----------------------------------------------------------------------------------------------------------------------------------


# internationalization -------------------------------------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
#-----------------------------------------------------------------------------------------------------------------------------------


# static files (CSS, JavaScript, Images) -------------------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = CARME_FRONTEND_PATH+'/Carme-Django/static/'

#LOGIN_REDIRECT_URL = 'home'
LOGIN_REDIRECT_URL = '/'

# Wiki settings
WIKI_ACCOUNT_HANDLING = False
WIKI_ACCOUNT_SIGNUP_ALLOWED = False
SITE_ID = 1
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#-----------------------------------------------------------------------------------------------------------------------------------


# maintanence mode -----------------------------------------------------------------------------------------------------------------
#MAINTENANCE_MODE = None
MAINTENANCE_MODE_IGNORE_SUPERUSER = True

MAINTENANCE_MODE_REDIRECT_URL = '/logout'
#-----------------------------------------------------------------------------------------------------------------------------------


# auto logout ----------------------------------------------------------------------------------------------------------------------
# SESSION_COOKIE_AGE = 60*60 # logout aufter one hour - regardless of activity
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # ende session after browser close
SESSION_AUTO_LOGOUT_TIME = 60*60  # logout aufter one hour od inactivity
SESSION_TIMEOUT_REDIRECT = 'account/login/'
#-----------------------------------------------------------------------------------------------------------------------------------


# enable time zones ----------------------------------------------------------------------------------------------------------------
USE_TZ = True
TIME_ZONE = CARME_TIMEZONE
#-----------------------------------------------------------------------------------------------------------------------------------


## todo lists -----------------------------------------------------------------------------------------------------------------------
## restrict access to ALL todo lists/views to `is_staff` users
## If False or unset, all users can see all views (but more granular permissions are still enforced
## within views, such as requiring staff for adding and deleting lists).
#TODO_STAFF_ONLY = False
#
## If you use the "public" ticket filing option, to whom should these tickets be assigned?
## Must be a valid username in your system. If unset, unassigned tickets go to "Anyone."
#TODO_DEFAULT_ASSIGNEE = 'Team Carme'
#
## If you use the "public" ticket filing option, to which list should these tickets be saved?
## Defaults to first list found, which is probably not what you want!
#TODO_DEFAULT_LIST_SLUG = 'tickets'
#
## If you use the "public" ticket filing option, to which *named URL* should the user be
## redirected after submitting? (since they can't see the rest of the ticket system).
## Defaults to "/"
#TODO_PUBLIC_SUBMIT_REDIRECT = '/'
#
## additionnal classes the comment body should hold
## adding "text-monospace" makes comment monospace
#TODO_COMMENT_CLASSES = ['class 1','class2']
##-----------------------------------------------------------------------------------------------------------------------------------

